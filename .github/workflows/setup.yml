name: Setup
on: workflow_dispatch

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        run: |
          set -ex

          GOOGLE_CLOUD_PLATFORM_ACCESS_TOKEN=$(curl --silent --fail -X POST \
            'https://www.googleapis.com/oauth2/v4/token' \
            --data "refresh_token=${{ secrets.GOOGLE_CLOUD_PLATFORM_REFRESH_TOKEN }}" \
            --data "client_id=${{ secrets.GOOGLE_CLOUD_PLATFORM_CLIENT_ID }}" \
            --data "client_secret=${{ secrets.GOOGLE_CLOUD_PLATFORM_CLIENT_SECRET }}" \
            --data "grant_type=refresh_token" \
            | jq -r '.access_token')

          VM_NAME=swift-ast-explorer-$(date +%Y%m%d-%H%M%S)
          VM_ZONE=us-west1-b
          VM_MACHINE_TYPE=g1-small
          VM_DISK_SIZE=30
          VM_SWAP_SIZE=2G

          data=$(cat <<EOF
          {
            "name": "$VM_NAME",
            "machineType": "projects/${{ secrets.GOOGLE_CLOUD_PLATFORM_PROJECT_ID }}/zones/$VM_ZONE/machineTypes/$VM_MACHINE_TYPE",
            "disks": [
              {
                "diskSizeGb": $VM_DISK_SIZE,
                "type": "PERSISTENT",
                "autoDelete": true,
                "boot": true,
                "initializeParams": {
                  "sourceImage": "projects/cos-cloud/global/images/family/cos-stable"
                }
              }
            ],
            "networkInterfaces": [
              {
                "accessConfigs": [
                  {
                    "type": "ONE_TO_ONE_NAT",
                    "name": "External NAT"
                  }
                ],
                "network": "global/networks/default"
              }
            ],
            "tags": {
              "items": [
                "http-server",
                "https-server"
              ]
            },
            "displayDevice": {
              "enableDisplay": false
            },
            "metadata": {
              "items": [
                {
                  "key": "startup-script",
                  "value": "sysctl vm.disk_based_swap=1\n\nfallocate -l $VM_SWAP_SIZE /var/swapfile\nchmod 600 /var/swapfile\nmkswap /var/swapfile\nswapon /var/swapfile\necho \"/var/swapfile none swap sw,nofail 0 0\" >> /etc/fstab"
                },
                {
                  "key": "block-project-ssh-keys",
                  "value": "true"
                },
                {
                  "key": "ssh-keys",
                  "value": "${{ secrets.SSH_LOGIN_USER }}:${{ secrets.SSH_PUBLIC_KEY }}"
                }
              ]
            }
          }
          EOF
          )

          curl --silent --fail -X POST \
            "https://compute.googleapis.com/compute/v1/projects/${{ secrets.GOOGLE_CLOUD_PLATFORM_PROJECT_ID }}/zones/$VM_ZONE/instances?key=${{ secrets.GOOGLE_CLOUD_PLATFORM_API_KEY }}" \
            --header "Authorization: Bearer $GOOGLE_CLOUD_PLATFORM_ACCESS_TOKEN" \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --compressed \
            --data "$data"

          ip_address=$(curl --silent --fail -X GET \
            "https://compute.googleapis.com/compute/v1/projects/${{ secrets.GOOGLE_CLOUD_PLATFORM_PROJECT_ID }}/zones/$VM_ZONE/instances/$VM_NAME?key=${{ secrets.GOOGLE_CLOUD_PLATFORM_API_KEY }}" \
            --header "Authorization: Bearer $GOOGLE_CLOUD_PLATFORM_ACCESS_TOKEN" \
            --header 'Accept: application/json' \
            --compressed \
            | jq  -r '.[].networkInterfaces[0].accessConfigs[0].natIP')


          docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          docker build --rm --no-cache --tag kishikawakatsumi/swift-ast-explorer .
          docker push kishikawakatsumi/swift-ast-explorer

          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          TERM=xterm ssh -t -t -o 'StrictHostKeyChecking no' "${{ secrets.SSH_LOGIN_USER }}@$ip_address" <<EOS
          set -ex

          [ -d app ] || git clone https://github.com/kishikawakatsumi/swift-ast-explorer.git app

          cd app
          git pull --rebase origin master

          docker_compose='docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "\$PWD:\$PWD" -w="\$PWD" docker/compose:latest'
          eval \$docker_compose pull
          docker image prune --force

          exit 0
          EOS
